<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--시험리스트 -->
<mapper namespace="exam">


	<insert id="examinsert" parameterType="ExamVo">
	<![CDATA[
	insert into exam VALUES(
						seq_exam_no.nextval,
						#{classNo},
						#{examTitle},
						#{examType},
						#{time},
						TO_DATE(#{startDate},'yyyy-mm-dd HH24:mi'),
						TO_DATE(#{endDate},'yyyy-mm-dd HH24:mi'),
						sysdate
						)
	]]>
		<selectKey keyProperty="examNo" resultType="int" order="AFTER">
			SELECT seq_exam_no.CURRVAL FROM DUAL
		</selectKey>
	</insert>

	<insert id="questioninsert" parameterType="map">
	<![CDATA[
	insert into question VALUES(
						seq_question_no.nextval,
						#{examNo},
						#{problemNo},
						#{point},
						#{order}
						
						)
	
	]]>
	</insert>
	<!--시험 출제시 solve insert를위한 select -->
	<select id="selectjusers" resultType="int" parameterType="int">
		<![CDATA[
			select      
				join_no            
			from  join_users
			where class_no = #{classNo}
			and type != '선생님'
		]]>
	</select>

	<select id="selectsquestion" resultType="int" parameterType="int">
		<![CDATA[
			select      
			    question_no          
			from question
			where exam_no = #{examNo}
		]]>
	</select>
	<insert id="insertsolve" parameterType="map">
		<![CDATA[
			insert into solve
			values(seq_solve_no.nextval,#{joinNo} ,#{examNo} ,null,null,null,'출제')
		]]>
	</insert>

	<select id="examList" resultType="ExamVo" parameterType="map">
	<![CDATA[
select 
        r.rnum,
        r.classNo,
        r.examNo,
        r.examTitle,
        r.problemAmount,
        r.startDate,
        r.endDate,
        r.numSubmit,
        r.attendNum,
        r.examType
from(select
            rownum rnum,
            o.classNo,
            o.examNo,
            o.examTitle,
            o.problemAmount,
            o.startDate,
            o.endDate,
            o.numSubmit,
            o.attendNum,
            o.examType
            from(SELECT          
                        e.class_no classNo,
                        e.exam_no examNo,
                        e.exam_title examTitle,
                        cn.count problemAmount,
                        e.start_date startDate,
                        e.end_date endDate,
                        can.count numSubmit,
                        at.count attendNum,
                        e.exam_type examType
                FROM exam e,(select
                                    e.exam_no,
                                    count(q.exam_no) count
                                     from exam e , question q
                                    where e.exam_no = q.exam_no(+)
                                    group by e.exam_no)cn,(select  
                                                                cn.exam_no,
                                                                count(cn.join_no) count
                                                                from (select 
                                                                            j.join_no,
                                                                            q.exam_no,
                                                                            count(q.question_no) count
                                                                      from join_users j, solve s ,question q
                                                                      where j.join_no = s.join_no
                                                                      and j.type != '선생님'
                                                                      and s.question_no = q.question_no
                                                                      and (s.status = '제출' or s.status = '완료')
                                                                      group by j.join_no , q.exam_no
                                                                      order by j.join_no , q.exam_no)cn,(select
                                                                                                                  exam_no,
                                                                                                                  count(*) count
                                                                                                           from question
                                                                                                           group by exam_no) ca
                                                                                                           where cn.count = ca.count
                                                                                                           and cn.exam_no = ca.exam_no
                                                                                                           group by cn.exam_no)can ,(select
                                                                                                                                        c.class_no,
                                                                                                                                        count(join_no) count
                                                                                                                                        from class c, join_users j
                                                                                                                                       
                                                                                                                                        where c.class_no = j.class_no
                                                                                                                                        and j.type != '선생님'
                                                                                                                                        group by c.class_no)at
                where e.exam_no= can.exam_no(+) 
                and e.exam_no = cn.exam_no
                and at.class_no = e.class_no
                and e.class_no = #{classNo}
                order by e.exam_regdate desc)o)r
                
                where ]]>

		<if test="keyward != null and keyward != '' ">

			r.examTitle LIKE '%'|| '#{keyward}' ||'%'

			and
		</if>
                
                <![CDATA[
                r.rnum >= #{startNum}
   		 		and r.rnum <= #{endNum}
                
		]]>

	</select>

	<!--시험리스트갯수 -->
	<select id="selectTotalCnt" resultType="int" parameterType="map">
	 	<![CDATA[
	 		select
	 		count(*)
			from exam 
			where 
		]]>

		<if test="keyward != null and keyward != '' ">

			exam_Title LIKE '%'|| '#{keyward}' ||'%'
			and
		</if>
		
		<![CDATA[		
			class_no = #{classNo}
	 	]]>

	</select>


	<!-- 시험의 문제들 리스트 -->
	<select id="examprolist" resultType="ProblemVo" parameterType="map">
		<![CDATA[
		select 
			r.rnum,
			r.ordernum,
			r.problemtitle,
			r.result,
			r.type
		from(select 
				 rownum rnum,
				 o.orderNum,
				 o.problemTitle,
				 o.result,
				 o.type
			 from(select
						q.order_num orderNum,
						p.problem_title problemTitle,
						
						decode(p.answer,s.submit_answer,'O','X') result,
						p.type type
						
						from solve s, question q, problem p 
					where s.question_no = q.question_no
					and p.problem_no = q.problem_no
					and q.exam_no = ${examNo}
					and s.join_no = ${joinNo}
					and (s.status = '제출' or s.status =  '완료')
			        order by q.order_num desc)o)r
		where r.rnum >= #{startNum}
	   	and r.rnum <= #{endNum}
			        
		]]>
	</select>

	<!--시험리스트갯수 -->
	<select id="selectproTotalCnt" resultType="int" parameterType="int">
	 	<![CDATA[
	 		
			select 
       			count(*) count 
			FROM question q , exam e
			where e.exam_no = q.exam_no
			and e.exam_no = #{examNo}
			group by e.exam_no
	 	]]>

	</select>

	<!-- 시험의 사람 리스트 -->
	<select id="examuserlist" resultType="JoinUserVo" parameterType="int">
		<![CDATA[
		 select 
			al.join_no joinNo,
		    u.name username,
		    decode(al.count,cl.count,'제출','진행중') result

		from users u ,(select 
			                e.exam_no,
			                j.user_no,
			                j.join_no,
			                count(*) count 
		               FROM question q , exam e, class c , join_users j
		               where e.exam_no = q.exam_no
		               and e.class_no = c.class_no
		               and j.class_no = c.class_no
		               and j.type != '선생님'
		               group by j.user_no,e.exam_no,j.join_no) al , (SELECT
					                                                        e.exam_no,
					                                                        j.user_no,
					                                                        j.join_no,
					                                                        count (*)  count
				                                                     FROM question q , exam e, class c , join_users j ,solve s
				                                                     where e.exam_no = q.exam_no
				                                                     and e.class_no = c.class_no
				                                                     and j.class_no = c.class_no
				                                                     and j.join_no = s.join_no
				                                                     and j.type != '선생님'
				                                                     and s.question_no = q.question_no
				                                                     and (s.status = '제출' or s.status = '완료')
		                                
		                                                   			 group by j.user_no,e.exam_no,j.join_no)cl
		where al.exam_no = cl.exam_no(+)
        and al.user_no = cl.user_no(+)
        and u.no =  al.user_no
		and al.exam_no = #{examNo}

		]]>
	</select>

	<select id="selectexam" resultType="ExamVo" parameterType="int">
		<![CDATA[
		select  
	    	exam_no examNo,
	    	exam_title examTitle,
	    	exam_type examType,
	   	 	time,
	   	 	
	   	 	TO_CHAR(start_date,'yyyy-MM-dd hh:mm:ss') startDate,
			TO_CHAR(end_date,'yyyy-MM-dd hh:mm:ss') endDate
			
		from exam
		where exam_no = #{examNo}

		]]>
	</select>

	<select id="selectquestion" resultType="QuestionVo" parameterType="int">
		<![CDATA[
		select
    		p.problem_no problemNo,
    		p.problem_title problemTitle,
    		p.type problemType,
    		q.point point
		from question q, problem p
		where q.problem_no = p.problem_no
		and q.exam_no = #{examNo}
		order by q.order_num

		]]>
	</select>

	<update id="examupdate" parameterType="ExamVo">
		<![CDATA[
			update exam
			set]]>
		<if test="examTitle != null and examTitle != ''">

				exam_title = #{examTitle}</if>
		<if test="examType != null and examType != ''">
				,exam_type = #{examType}</if>
		
		<if test="time != null and time != ''">
				,time = #{time}
		</if>

		<if test="startDate != null and startDate != ''">
			,start_date = TO_DATE(#{startDate},'yyyy-mm-dd hh:mi:ss')
		</if>

		<if test="endDate != null and endDate != ''">
			,end_date = TO_DATE(#{endDate},'yyyy-mm-dd hh:mi:ss')
		</if>
			    
		<![CDATA[
			where exam_no = #{examNo}
		]]>
	</update>

	<delete id="qeustiondelete" parameterType="int">
		<![CDATA[
			delete 
			from question
			where exam_no = #{examNo}
			]]>
	</delete>

	<insert id="questionupdate" parameterType="QuestionVo">
		<![CDATA[
			insert into question VALUES(
							seq_question_no.nextval,
							#{examNo},
							#{problemNo},
							#{point},
							#{order}
							)	
		]]>
	</insert>

	<select id="getAttendance" parameterType="int" resultType="int">
		<![CDATA[
			select  
				count(*)
			from solve s ,question q
			where s.question_no(+) = q.question_no
			and q.exam_no = #{examNo}
			and s.join_no = #{joinNo}
			and (s.status = '제출' or s.status = '완료')
		]]>
	</select>

	<!-- 시험 풀기 시작시~~~~~~~~~~~~~ -->
	<select id="examstart" parameterType="int" resultType="ExamVo">
		<![CDATA[
			select
			    e.exam_no examNo,
			    e.exam_title examTitle,
			    e.exam_type examType,
			    time,
                qu.count problemAmount
			from exam e,(select
                            exam_no,
                            count(*) count
                         from question
                         group by exam_no)qu
            
            where e.exam_no = qu.exam_no
			and e.exam_no = #{examNo}
		]]>
	</select>


	<select id="startquestion" parameterType="map" resultType="QuestionVo">
		<![CDATA[
			select
				problem_no problemNo,
				point
			from question
			where order_num = #{orderNum}
            and exam_no = #{examNo}
		]]>
	</select>

	<select id="selectproblem" parameterType="int" resultType="ProblemVo">
		<![CDATA[
			select
				type type,
				content,
				content_image contentImage,
				ANSWER answer
			from problem
			where problem_no = #{problemNo}
			
		]]>
	</select>
	
	<select id="selectanswer" parameterType="map" resultType="String">
		<![CDATA[
			select
				SUBMIT_ANSWER
			from solve
			where join_no = #{joinNo}
			and question_no = (select 
			                        question_no
			                   from question
			                   where exam_no = #{examNo}
			                   and order_num = #{orderNum})
			
		]]>
	</select>
	
	<select id="getpoint" parameterType="map" resultType="int">
		<![CDATA[
			select
				MYPOINT
			from solve
			where join_no = #{joinNo}
			and question_no = (select 
			                        question_no
			                   from question
			                   where exam_no = #{examNo}
			                   and order_num = #{orderNum})
			
		]]>
	</select>
	
	<select id="selectchoice" parameterType="int" resultType="ChoiceVo">
		<![CDATA[
			select
			    choice_content choiceContent,
			    attachment_file attachmentFile,
			    order_no orderNo
			from choice
			where problem_no = #{problemNo}
			order by order_no
		]]>
	</select>
	<update id="updateSolve" parameterType="map">
	update solve
	set submit_answer = #{answer},
	    status = '저장'
	where join_no = #{joinNo}
	and (status = '저장' or status = '출제')
	and question_no = (select 
	                        question_no
	                   from question
	                   where exam_no = #{examNo}
	                   and order_num = #{orderNum})
	</update>
	
	<update id="updatefSolve" parameterType="map">
	update solve
	set ATTACHMENT_FILE = #{saveName},
	    status = '저장'
	where join_no = #{joinNo}
	and question_no = (select 
	                        question_no
	                   from question
	                   where exam_no = #{examNo}
	                   and order_num = #{orderNum})
	</update>
	
	<update id="examfinish" parameterType="map">
	update solve
	set status = '제출'
	where join_no = #{joinNo}
	and question_no in (select 
	                        question_no
	                   from question
	                   where exam_no = #{examNo})
	</update>
	
	
	<update id="grantpoint" parameterType="map">
	update solve
	set	MYPOINT = #{point}
	where join_no = #{joinNo}
	and question_no in (select 
	                        question_no
	                   from question
	                   where exam_no = #{examNo}
	                   and order_num = #{orderNum})
	</update>
	
	<!-- 문제풀기시 리스트 갯수  -->
	<select id="examsolvecount" parameterType="map" resultType="int">
		<![CDATA[
			select 
				count(*)
			from question q  ,solve s
			where q.question_no = s.question_no
			and exam_no = #{examNo}
			and join_no = #{joinNo}
		]]>
	</select>
	
	
	<!-- 문제풀기시 리스트  -->
	<select id="examsolveList" parameterType="map" resultType="QuestionVo">
		<![CDATA[
			select
				q.order_num orderNum,
				p.type problemType,
				decode(q.point,s.mypoint,'O','X') result
			from question q, solve s,problem p
			where q.question_no = s.question_no
			and p.problem_no = q.problem_no
			and s.join_no = #{joinNo}
			and q.exam_no = #{examNo}
			and order_num >= #{startNum}
			and order_num <= #{endNum}
			order by order_num asc
		]]>
	</select>
	
	
</mapper>
